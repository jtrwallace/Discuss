(dp1
S'output'
p2
S"<class 'sqlite3.OperationalError'> database is locked"
p3
sS'layer'
p4
S'/Users/Joshua/Git Repositories/CMPS 183/web2py/applications/Discuss/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    return dict()\n\ndef newdiscussion():\n    form=SQLFORM(db.discussions)\n    if form.process().accepted:\n        print("In if")\n        #db.discussions.discussion_name.represent = lambda discussion_name,row: discussion_name.capitalize()\n        redirect(URL(\'default\', \'index\'))\n    if not form.process().accepted:\n        print("In not")\n    return dict(form=form)\n\ndef discussion():\n    return dict()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(user)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/applications/Discuss/controllers/default.py", line 66, in <module>\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/applications/Discuss/controllers/default.py", line 43, in user\n    return dict(form=auth())\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/tools.py", line 1614, in __call__\n    return getattr(self, args[0])()\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/tools.py", line 2793, in login\n    self.log_event(log, user)\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/tools.py", line 2215, in log_event\n    origin=origin, user_id=user_id)\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/packages/dal/pydal/objects.py", line 712, in insert\n    ret = self._db._adapter.insert(self, self._listify(fields))\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/packages/dal/pydal/adapters/base.py", line 739, in insert\n    raise e\nOperationalError: database is locked\n'
p11
s.