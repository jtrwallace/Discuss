(dp1
S'output'
p2
S"<type 'exceptions.RuntimeError'> Syntax Not Supported"
p3
sS'layer'
p4
S'/Users/Joshua/Git Repositories/CMPS 183/web2py/applications/Discuss/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\nfrom gluon import utils as gluon_utils\nimport json\n\ndef index():\n    return dict()\n\ndef newdiscussion():\n    discussion_id = gluon_utils.web2py_uuid()\n    return dict(discussion_id=discussion_id)\n\ndef load_discussions():\n    discussions = db().select(db.discussions.ALL)\n    return response.json(list(discussions))\n\ndef load_single_discussion():\n    discussion = db(db.discussions.discussion_id == request.vars.discussion_id).select().first()\n    return response.json(discussion)\n\ndef load_discussion_from_post():\n    post = db(db.posts.post_id == request.vars.post_id).select().first()\n    discussion = db(db.discussions.id == post[\'discussion_id\']).select().first()\n    return response.json(discussion)\n\ndef update_views():\n    post = db(db.posts.post_id == request.vars.post_id).select().first()\n    post[\'post_views\'] = post[\'post_views\'] + 1\n    db.posts.update((db.posts.post_id == request.vars.post_id),\n            post_views=post[\'post_views\'])\n    return "ok"\n\ndef search_discussions():\n    search_input = request.vars.search_input.lower()\n    string_length = len(search_input)\n    discussions = db().select(db.discussions.ALL)\n    matched_discussions = []\n    for discussion in discussions:\n        first_chars = discussion[\'discussion_name\'][0:string_length].lower()\n        if search_input == first_chars:\n            matched_discussions.append(discussion)\n    return response.json(list(matched_discussions))\n\n@auth.requires_signature()\ndef add_discussion():\n    db.discussions.update_or_insert((db.discussions.discussion_id == request.vars.discussion_id),\n            discussion_id=request.vars.discussion_id,\n            discussion_name=request.vars.discussion_name.title(),\n            discussion_description=request.vars.discussion_description.capitalize(),\n            discussion_location=request.vars.discussion_location.title(),\n            banner_photo_url=request.vars.banner_photo_url,\n            discussion_last_updated=request.vars.discussion_last_updated,\n            discussion_pretty_updated=request.vars.discussion_pretty_updated\n            )\n    return "ok"\n\ndef discussion():\n    discussion_id = request.args(0)\n    discussion = db(db.discussions.discussion_id == discussion_id).select().first()\n    record = db.membership(discussion=discussion[\'id\'], user_table=auth.user_id)\n    if not record:\n        is_member = "false"\n    else:\n        is_member = "true"\n    return locals()\n\n@auth.requires_signature()\ndef become_member():\n    discussion = db(db.discussions.discussion_id == request.vars.discussion_id).select().first()\n    db.membership.insert(discussion=discussion[\'id\'], user_table=auth.user_id)\n    return "ok"\n\n@auth.requires_signature()\ndef remove_member():\n    discussion = db(db.discussions.discussion_id == request.vars.discussion_id).select().first()\n    db(db.membership.discussion==discussion[\'id\'], db.membership.user_table==auth.user_id).delete()\n    return "ok"\n\ndef load_posts():\n    discussion = db(db.discussions.discussion_id == request.vars.discussion_id).select().first()\n    my_drafts_query = (db.posts.is_draft == True) & (db.posts.post_author == auth.user_id) & (db.posts.discussion_id == discussion.id)\n    all_completed_posts_query = (db.posts.discussion_id == discussion.id) & (db.posts.is_draft == False)\n    my_drafts = db(my_drafts_query)\n    all_completed_posts = db(all_completed_posts_query)\n    discussion_posts = my_drafts.select() | all_completed_posts.select()\n    return response.json(list(discussion_posts))\n\n@auth.requires_signature()\ndef add_post():\n    if len(request.vars.discussion_id) == 36:\n        discussion = db(db.discussions.discussion_id == request.vars.discussion_id).select().first()\n    else:\n        discussion = db(db.discussions.id == request.vars.discussion_id).select().first()\n    post_author_name = auth.user.first_name + " " + auth.user.last_name\n    db.posts.update_or_insert((db.posts.post_id == request.vars.post_id),\n            post_id=request.vars.post_id,\n            post_title=request.vars.post_title,\n            post_author_name=post_author_name,\n            post_content=request.vars.post_content,\n            is_draft=json.loads(request.vars.is_draft),\n            active_draft_content=request.vars.active_draft_content,\n            active_draft_title=request.vars.active_draft_title,\n            posting_time=request.vars.posting_time,\n            posting_time_pretty=request.vars.posting_time_pretty,\n            last_reply_time=request.vars.posting_time,\n            last_reply_time_pretty=request.vars.posting_time_pretty,\n            last_reply_author_name=post_author_name,\n            discussion_id=discussion[\'id\']\n            )\n    return "ok"\n\n@auth.requires_signature()\ndef del_post():\n    db(db.posts.post_id == request.vars.post_id).delete()\n    return "ok"\n\ndef load_members():\n    discussion = db(db.discussions.discussion_id == request.vars.discussion_id).select().first()\n    records = db(db.membership.discussion==discussion[\'id\']).select()\n    members = []\n    for record in records:\n        members.append(db(db.auth_user.id == record[\'user_table\']).select().first())\n    return response.json(list(members))\n\ndef post():\n    post_id = request.args(0)\n    post = db(db.posts.post_id == post_id).select().first()\n    record = db.membership(discussion=post[\'discussion_id\'], user_table=auth.user_id)\n    if not record:\n        is_member = "false"\n    else:\n        is_member = "true"\n    return locals()\n\ndef load_single_post():\n    post = db(db.posts.post_id == request.vars.post_id).select().first()\n    return response.json(post)\n\ndef load_replies():\n    post = db(db.posts.post_id == request.vars.post_id).select().first()\n    my_drafts_query = (db.replies.is_draft == True) & (db.replies.reply_author == auth.user_id) & (db.replies.post_id == post.id)\n    all_completed_replies_query = (db.replies.post_id == post.id) & (db.replies.is_draft == False)\n    my_drafts = db(my_drafts_query)\n    all_completed_replies = db(all_completed_replies_query)\n    post_replies = my_drafts.select() | all_completed_replies.select()\n    return response.json(list(post_replies))\n\ndef add_reply():\n    if len(request.vars.post_id) == 36:\n        post = db(db.posts.post_id == request.vars.post_id).select().first()\n    else:\n        post = db(db.posts.id == request.vars.post_id).select().first()\n    reply_author_name = auth.user.first_name + " " + auth.user.last_name\n    db.replies.update_or_insert((db.replies.reply_id == request.vars.reply_id),\n            reply_id=request.vars.reply_id,\n            reply_title=request.vars.reply_title,\n            reply_author_name=reply_author_name,\n            reply_content=request.vars.reply_content,\n            is_draft=json.loads(request.vars.is_draft),\n            active_draft_content=request.vars.active_draft_content,\n            active_draft_title=request.vars.active_draft_title,\n            reply_time=request.vars.reply_time,\n            reply_time_pretty=request.vars.reply_time_pretty,\n            post_id=post[\'id\']\n            )\n    return "ok"\n\ndef del_reply():\n    db(db.replies.reply_id == request.vars.reply_id).delete()\n    return "ok"\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(update_views)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/applications/Discuss/controllers/default.py", line 219, in <module>\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/applications/Discuss/controllers/default.py", line 38, in update_views\n    post_views=post[\'post_views\'])\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/packages/dal/pydal/objects.py", line 358, in update\n    raise RuntimeError("Syntax Not Supported")\nRuntimeError: Syntax Not Supported\n'
p11
s.