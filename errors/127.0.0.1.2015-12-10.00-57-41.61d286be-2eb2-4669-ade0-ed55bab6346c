(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> Field user does not belong to the table"
p3
sS'layer'
p4
S'/Users/Joshua/Git Repositories/CMPS 183/web2py/applications/Discuss/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\nfrom gluon import utils as gluon_utils\nimport json\n\ndef index():\n    return dict()\n\ndef newdiscussion():\n    discussion_id = gluon_utils.web2py_uuid()\n    return dict(discussion_id=discussion_id)\n\ndef load_discussions():\n    discussions = db().select(db.discussions.ALL)\n    return response.json(list(discussions))\n\ndef load_single_discussion():\n    discussion = db(db.discussions.discussion_id == request.vars.discussion_id).select().first()\n    return response.json(discussion)\n\n@auth.requires_signature()\ndef add_discussion():\n    db.discussions.update_or_insert((db.discussions.discussion_id == request.vars.discussion_id),\n            discussion_id=request.vars.discussion_id,\n            discussion_name=request.vars.discussion_name.title(),\n            discussion_description=request.vars.discussion_description.capitalize(),\n            discussion_location=request.vars.discussion_location.title(),\n            banner_photo_url=request.vars.banner_photo_url,\n            discussion_last_updated=request.vars.discussion_last_updated,\n            discussion_pretty_updated=request.vars.discussion_pretty_updated\n            )\n    return "ok"\n\ndef discussion():\n    discussion_id = request.args(0)\n    discussion = db(db.discussions.discussion_id == discussion_id).select().first()\n    record = db.membership(discussion=discussion[\'id\'], user_table=auth.user_id)\n    if not record:\n        is_member = "false"\n    else:\n        is_member = "true"\n    return locals()\n\ndef become_member():\n    db.membership.insert(discussion=request.vars.discussion_id, user=auth.user_id)\n    return "ok"\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(become_member)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/applications/Discuss/controllers/default.py", line 95, in <module>\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/applications/Discuss/controllers/default.py", line 53, in become_member\n    db.membership.insert(discussion=request.vars.discussion_id, user=auth.user_id)\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/packages/dal/pydal/objects.py", line 712, in insert\n    ret = self._db._adapter.insert(self, self._listify(fields))\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/packages/dal/pydal/objects.py", line 629, in _listify\n    \'Field %s does not belong to the table\' % name)\nSyntaxError: Field user does not belong to the table\n'
p11
s.